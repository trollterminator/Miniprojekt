@page "/home"
@inherits LayoutComponentBase

@using kreddit_app.Data;
@using shared.Model;
@inject ApiService apiService

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@if (posts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <tr>
            <th>Title</th>
            <th>User</th>
            <th>Content</th>
            <th>Date</th>
            <th colspan="3">Votes</th>
        </tr>
        @foreach (var post in posts)
        {
            <tr>
                <!-- 
                    These a href links will match the route in the page 'PostItem.razor'.
                    The route is defined as "/post/{id}" and the id is the post id.
                -->
                <td><a href="/post/@post.Id">@post.Title</a></td>
                <td>@post.User</td>
                <td>@post.Content</td>
				<td>@post.Date</td>
				<td>@(post.Upvotes - post.Downvotes)</td>
                <td><button @onclick="async () => await Upvote(post.Id)">Upvote</button></td>
                <td><button @onclick="async () => await Downvote(post.Id)">Downvote</button></td>
            </tr>
        }
    </table>
}
    <br/>

    <div>
        <br />
        <h3>Write a Post</h3>
        <input placeholder="User" type="input" id="user" @bind-value="user" />
        <input placeholder="Title" type="input" id="title" @bind-value="title"/>
        <input placeholder="Content" type="input" id="content" @bind-value="content" />
        <button id="createPostButton" type="button" @onclick="async () => await CreateNewPost()">Post post</button>
    </div>

@code {
    private List<Post>? posts;
    private Post? votePost;
    private string? content;
    private string user;
    private string title;

    protected override async Task OnInitializedAsync()
    {
        posts = await apiService.GetPosts();
    }

    private async Task Upvote(int id)
    {
        var updatedPost = await apiService.UpvotePost(id);
        posts.Where(p => p.Id == id).SingleOrDefault().Upvotes++;
    }

    private async Task Downvote(int id)
    {
        var updatedPost = await apiService.DownvotePost(id);
        posts.Where(p => p.Id == id).SingleOrDefault().Upvotes--;
    }

    private async Task CreateNewPost()
    {
        if (content == null)
        {
            return;
        }
        Post newPost = await apiService.CreatePost(title, content, user);
        posts.Add(newPost);
    }
}
